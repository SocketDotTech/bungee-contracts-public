// SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.4;

import {Test} from "../../../../lib/forge-std/src/Test.sol";
import {Vm} from "../../../../lib/forge-std/src/Vm.sol";
import "../../../../lib/forge-std/src/console.sol";
import "../../../../lib/forge-std/src/Script.sol";
import "../../../../lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol";
import {SocketGatewayBaseTest, SocketGateway} from "../../SocketGatewayBaseTest.sol";
import {SymbiosisBridgeImpl} from "../../../../src/bridges/symbiosis/SymbiosisBridgeImp.sol";
import {ISocketRoute} from "../../../../src/interfaces/ISocketRoute.sol";

contract SymbiosisEthToArbitrumNativeTest is Test, SocketGatewayBaseTest {
    SocketGateway internal socketGateway;

    event NewRouteAdded(uint32 indexed routeId, address indexed route);
    bytes32 metadata =
        0x28fd8a5dda29b4035905e0657f97244a0e0bef97951e248ed0f2c6878d6590c2;
    //ETH Mainnet
    address constant sender1 = 0x246Add954192f59396785f7195b8CB36841a9bE8;
    address constant liquidityPoolManager =
        0x2A5c2568b10A0E826BfA892Cf21BA7218310180b;
    address constant _symbiosisGateway =
        0x0A0B7D1eea99e6189995432fec8172bB2dFFF847;
    address constant _symbiosisMetaRouter =
        0x1DCfbC3fA01b2a86bC3a3f43479cCe9E8D438Adc;

    SymbiosisBridgeImpl internal symbiosisImpl;

    function setUp() public {
        uint256 fork = vm.createFork(vm.envString("ETHEREUM_RPC"), 18375470);
        vm.selectFork(fork);
        socketGateway = createSocketGateway();
        symbiosisImpl = new SymbiosisBridgeImpl(
            _symbiosisMetaRouter,
            _symbiosisGateway,
            address(socketGateway),
            address(socketGateway)
        );
        address route_0 = address(symbiosisImpl);

        // Emits Event
        emit NewRouteAdded(0, address(symbiosisImpl));
        vm.startPrank(owner);
        socketGateway.addRoute(route_0);
        vm.stopPrank();
    }

    struct SymbiosisDataVars {
        bytes firstSwapCalldata;
        bytes secondSwapCalldata;
        address[] approvedTokens;
        address firstDexRouter;
        address secondDexRouter;
        uint256 amount;
        bool nativeIn;
        address relayRecipient;
        bytes otherSideCalldata;
    }

    function testSendNativeBridging() public {
        vm.startPrank(sender1);

        bytes memory firstSwapCalldata = hex"d0e30db0";
        bytes memory secondSwapCalldata = hex"";
        address[] memory approvedTokens = new address[](2);
        approvedTokens[0] = 0x0000000000000000000000000000000000000000;
        approvedTokens[1] = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;
        address firstDexRouter = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;
        address secondDexRouter = 0xcB28fbE3E9C0FEA62E0E63ff3f232CECfE555aD4;
        uint256 amount = 0x2aa1efb94e0000;
        address relayRecipient = 0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8;
        bool nativeIn = true;
        bytes
            memory otherSideCalldata = hex"ce654c1700000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000b5e620f48000000000000000000000000000000000000000000000000000002aa1efb94e0000000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000fff37b9427c715fd6c6b319586812d8818eda940000000000000000000000000b8f275fbf7a959f4bce59999a2ef122a099e81a80000000000000000000000005523985926aa12ba58dc5ad00ddca99678d7227e000000000000000000000000fff37b9427c715fd6c6b319586812d8818eda940000000000000000000000000000000000000000000000000000000000000dbe00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000cb28fbe3e9c0fea62e0e63ff3f232cecfe555ad40000000000000000000000000000000000000000000000000000000000000260000000000000000000000000b8f275fbf7a959f4bce59999a2ef122a099e81a800000000000000000000000000000000000000000000000000000000000005800000000000000000000000000000000000000000000000000000000000000064000000000000000000000000fff37b9427c715fd6c6b319586812d8818eda94073796d62696f7369732d6170700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000001ce4e75e2bd6bbbacde1e10d6813228138337e86000000000000000000000000e3db9ad5a3c6387bece39fafc26dbb2b594fb7ff00000000000000000000000000000000000000000000000000000000000002e41e859a05000000000000000000000000000000000000000000000000002aa1efb94e000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000b79a4f5828eb55c10d7abf4bfe9a9f5d11aa84e00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c48f6bdeaa000000000000000000000000000000000000000000000000000000000000000900000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000029ec09985980000000000000000000000000000000000000000000000000000029c7499bf90609000000000000000000000000b79a4f5828eb55c10d7abf4bfe9a9f5d11aa84e0000000000000000000000000000000000000000000000000000000006538a23f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000bcc2637dfa64999f75abb53a7265b5b4932e40eb00000000000000000000000000000000000000000000000000000000000000020000000000000000000000001ce4e75e2bd6bbbacde1e10d6813228138337e86000000000000000000000000e3db9ad5a3c6387bece39fafc26dbb2b594fb7ff00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000424e691a2aa0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000221b262dd80000000000000000000000000000000000000000000000000000029fd085f01fe59000000000000000000000000b79a4f5828eb55c10d7abf4bfe9a9f5d11aa84e00000000000000000000000006e2b76966cbd9cf4cc2fa0d76d24d5241e0abc2f000000000000000000000000e3db9ad5a3c6387bece39fafc26dbb2b594fb7ff00000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000000c4000000000000000000000000fff37b9427c715fd6c6b319586812d8818eda94000000000000000000000000039de19c9ff25693a2311aad1dc5c790194084a39000000000000000000000000b0d30ad9c1a7b303977db7ea073a4329d930d94c000000000000000000000000fff37b9427c715fd6c6b319586812d8818eda940000000000000000000000000000000000000000000000000000000000000014473796d62696f7369732d61707000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022812aa3caf000000000000000000000000a9305c3c14757bae2e73ef7f66fe241f5f6bf3470000000000000000000000005aea5775959fbc2557cc8789bc1bf90a239d9a91000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000a9305c3c14757bae2e73ef7f66fe241f5f6bf347000000000000000000000000fff37b9427c715fd6c6b319586812d8818eda9400000000000000000000000000000000000000000000000000027db55fc247e59000000000000000000000000000000000000000000000000002780baf20f47a60000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008a00000000000000000000000000000000000000000000006c00005600001a0020d6bdbf785aea5775959fbc2557cc8789bc1bf90a239d9a9141215aea5775959fbc2557cc8789bc1bf90a239d9a9100042e1a7d4d0000000000000000000000000000000000000000000000000000000000000000c0616e2b76966cbd9cf4cc2fa0d76d24d5241e0abc2f00000000000000000000000000000000000000000000ea698b4700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

        SymbiosisDataVars memory symbiosisDataVars;

        symbiosisDataVars.firstSwapCalldata = firstSwapCalldata;
        symbiosisDataVars.secondSwapCalldata = secondSwapCalldata;
        symbiosisDataVars.approvedTokens = approvedTokens;
        symbiosisDataVars.firstDexRouter = firstDexRouter;
        symbiosisDataVars.secondDexRouter = secondDexRouter;
        symbiosisDataVars.amount = amount;
        symbiosisDataVars.nativeIn = nativeIn;
        symbiosisDataVars.relayRecipient = relayRecipient;
        symbiosisDataVars.otherSideCalldata = otherSideCalldata;

        deal(sender1, amount);
        assertEq(sender1.balance, amount);
        assertEq(address(socketGateway).balance, 0);

        bytes memory impldata = abi.encodeWithSelector(
            symbiosisImpl.SYMBIOSIS_NATIVE_EXTERNAL_BRIDGE_FUNCTION_SELECTOR(),
            metadata,
            sender1,
            42161,
            SymbiosisBridgeImpl.SymbiosisMetaRouteData(
                symbiosisDataVars.firstSwapCalldata,
                symbiosisDataVars.secondSwapCalldata,
                symbiosisDataVars.approvedTokens,
                symbiosisDataVars.firstDexRouter,
                symbiosisDataVars.secondDexRouter,
                symbiosisDataVars.amount,
                symbiosisDataVars.nativeIn,
                symbiosisDataVars.relayRecipient,
                symbiosisDataVars.otherSideCalldata
            )
        );

        uint256 gasStockBeforeBridge = gasleft();

        socketGateway.executeRoute{value: symbiosisDataVars.amount}(
            385,
            impldata
        );

        uint256 gasStockAfterBridge = gasleft();

        assertEq(sender1.balance, 0);
        assertEq(address(socketGateway).balance, 0);

        console.log(
            "symbiosis-Bridge-Router NativeToken from Ethereum to zksync costed: ",
            gasStockBeforeBridge - gasStockAfterBridge
        );

        vm.stopPrank();
    }
}
