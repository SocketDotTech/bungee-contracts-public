// SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.4;

import {Test} from "../../../../lib/forge-std/src/Test.sol";
import {Vm} from "../../../../lib/forge-std/src/Vm.sol";
import "../../../../lib/forge-std/src/console.sol";
import "../../../../lib/forge-std/src/Script.sol";
import "../../../../lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol";
import {SocketGatewayBaseTest, SocketGateway} from "../../SocketGatewayBaseTest.sol";
import {SymbiosisBridgeImpl} from "../../../../src/bridges/symbiosis/SymbiosisBridgeImp.sol";
import {ISocketRoute} from "../../../../src/interfaces/ISocketRoute.sol";

contract SymbiosisBridgeUSDCTest is Test, SocketGatewayBaseTest {
    SocketGateway internal socketGateway;

    event NewRouteAdded(uint32 indexed routeId, address indexed route);
    bytes32 metadata =
        0x28fd8a5dda29b4035905e0657f97244a0e0bef97951e248ed0f2c6878d6590c2;
    //ETH Mainnet
    address constant USDT = 0xc2132D05D31c914a87C6611C10748AEb04B58e8F;
    address constant _symbiosisMetaRouter =
        0xF951789c6A356BfbC3033648AA10b5Dd3e9d88C0;
    address constant sender1 = 0xD07E50196a05e6f9E6656EFaE10fc9963BEd6E57;
    address constant _symbiosisGateway =
        0x5D025432bCBe100354b5fb7b1A68D1641e677F6C;
    address constant receiver = 0x17Ac6982b9CeAfbB36ee486722E8EB0f30b1E97D;

    SymbiosisBridgeImpl internal symbiosisImpl;

    function setUp() public {
        uint256 fork = vm.createFork(vm.envString("POLYGON_RPC"), 48667945);
        vm.selectFork(fork);
        socketGateway = createSocketGateway();
        symbiosisImpl = new SymbiosisBridgeImpl(
            _symbiosisMetaRouter,
            _symbiosisGateway,
            address(socketGateway),
            address(socketGateway)
        );
        address route_0 = address(symbiosisImpl);

        // Emits Event
        emit NewRouteAdded(0, route_0);
        vm.startPrank(owner);
        socketGateway.addRoute(route_0);
        vm.stopPrank();
    }

    struct SymbiosisDataVars {
        bytes firstSwapCalldata;
        bytes secondSwapCalldata;
        address[] approvedTokens;
        address firstDexRouter;
        address secondDexRouter;
        uint256 amount;
        bool nativeIn;
        address relayRecipient;
        bytes otherSideCalldata;
    }

    function testUSDTtoUSDT() public {
        // uint256 amount = 100e6;
        uint256 value = 0;
        bytes
            memory firstSwapCalldata = hex"12aa3caf000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd09000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f0000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa84174000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd09000000000000000000000000f951789c6a356bfbc3033648aa10b5dd3e9d88c00000000000000000000000000000000000000000000000000000000005f5e1000000000000000000000000000000000000000000000000000000000005f46acd0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009b00000000000000000000000000000000000000000000000000007d00001a0020d6bdbf78c2132d05d31c914a87c6611c10748aeb04b58e8f02a00000000000000000000000000000000000000000000000000000000000000001ee63c1e580772510189425ac63f9a5a5ef2fd0c7fda58cbfc7c2132d05d31c914a87c6611c10748aeb04b58e8f1111111254eeb25477b68fb85ed929f73a9605820000000000ea698b47";
        bytes memory secondSwapCalldata = hex"";
        address[] memory approvedTokens = new address[](2);
        approvedTokens[0] = 0xc2132D05D31c914a87C6611C10748AEb04B58e8F;
        approvedTokens[1] = 0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174;
        address firstDexRouter = 0x1111111254EEB25477B68fb85Ed929f73A960582;
        address secondDexRouter = 0xcB28fbE3E9C0FEA62E0E63ff3f232CECfE555aD4;
        uint256 amount = 0x05f5e100;
        address relayRecipient = 0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8;
        bool nativeIn = false;
        bytes
            memory otherSideCalldata = hex"ce654c170000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000003d0900000000000000000000000000000000000000000000000000000000005f526370000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000080f14ebcecb97602048c2e66e19df302a203b0ac000000000000000000000000b8f275fbf7a959f4bce59999a2ef122a099e81a80000000000000000000000005523985926aa12ba58dc5ad00ddca99678d7227e00000000000000000000000016294a53032aa33a335902d462d201a129cffbe4000000000000000000000000000000000000000000000000000000000000dbe00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000cb28fbe3e9c0fea62e0e63ff3f232cecfe555ad40000000000000000000000000000000000000000000000000000000000000260000000000000000000000000b8f275fbf7a959f4bce59999a2ef122a099e81a80000000000000000000000000000000000000000000000000000000000000580000000000000000000000000000000000000000000000000000000000000006400000000000000000000000016294a53032aa33a335902d462d201a129cffbe473796d62696f7369732d61707000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000059aa2e5f628659918a4890a2a732e6c8bd334e7a000000000000000000000000eeae2132f2e21f68d862c535d7d9857803fbcf3f00000000000000000000000000000000000000000000000000000000000002e41e859a050000000000000000000000000000000000000000000000000000000005f5263700000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000b79a4f5828eb55c10d7abf4bfe9a9f5d11aa84e00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c48f6bdeaa000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000005f155a70000000000000000000000000000000000000000000000000000000005efd43b000000000000000000000000b79a4f5828eb55c10d7abf4bfe9a9f5d11aa84e000000000000000000000000000000000000000000000000000000000652a83880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000006148fd6c649866596c3d8a971fc313e5ece84882000000000000000000000000000000000000000000000000000000000000000200000000000000000000000059aa2e5f628659918a4890a2a732e6c8bd334e7a000000000000000000000000eeae2132f2e21f68d862c535d7d9857803fbcf3f000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002c4e691a2aa0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000003d0900000000000000000000000000000000000000000000000000000000005f159ff000000000000000000000000b79a4f5828eb55c10d7abf4bfe9a9f5d11aa84e00000000000000000000000001111111254eeb25477b68fb85ed929f73a960582000000000000000000000000eeae2132f2e21f68d862c535d7d9857803fbcf3f00000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000004400000000000000000000000080f14ebcecb97602048c2e66e19df302a203b0ac00000000000000000000000001a3c8e513b758ebb011f7afaf6c37616c9c24d90000000000000000000000005523985926aa12ba58dc5ad00ddca99678d7227e00000000000000000000000016294a53032aa33a335902d462d201a129cffbe4000000000000000000000000000000000000000000000000000000000000a4b173796d62696f7369732d6170700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c8bc80f1a800000000000000000000000080f14ebcecb97602048c2e66e19df302a203b0ac0000000000000000000000000000000000000000000000000000000005ed896f0000000000000000000000000000000000000000000000000000000005ece2f500000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000001000000000000000000000000be3ad6a5669dc0b8b12febc03608860c31e2eef6ea698b4700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

        SymbiosisDataVars memory symbiosisDataVars;

        symbiosisDataVars.firstSwapCalldata = firstSwapCalldata;
        symbiosisDataVars.secondSwapCalldata = secondSwapCalldata;
        symbiosisDataVars.approvedTokens = approvedTokens;
        symbiosisDataVars.firstDexRouter = firstDexRouter;
        symbiosisDataVars.secondDexRouter = secondDexRouter;
        symbiosisDataVars.amount = amount;
        symbiosisDataVars.nativeIn = nativeIn;
        symbiosisDataVars.relayRecipient = relayRecipient;
        symbiosisDataVars.otherSideCalldata = otherSideCalldata;

        //sequence of arguments for implData: _amount, _receiverAddress, _token
        bytes memory impldata = abi.encodeWithSelector(
            symbiosisImpl.SYMBIOSIS_ERC20_EXTERNAL_BRIDGE_FUNCTION_SELECTOR(),
            metadata,
            receiver,
            USDT,
            42161,
            SymbiosisBridgeImpl.SymbiosisMetaRouteData(
                symbiosisDataVars.firstSwapCalldata,
                symbiosisDataVars.secondSwapCalldata,
                symbiosisDataVars.approvedTokens,
                symbiosisDataVars.firstDexRouter,
                symbiosisDataVars.secondDexRouter,
                symbiosisDataVars.amount,
                symbiosisDataVars.nativeIn,
                symbiosisDataVars.relayRecipient,
                symbiosisDataVars.otherSideCalldata
            )
        );

        deal(address(USDT), address(sender1), amount);
        assertEq(IERC20(USDT).balanceOf(sender1), amount);
        assertEq(IERC20(USDT).balanceOf(address(socketGateway)), 0);
        assertEq(IERC20(USDT).balanceOf(receiver), 0);

        vm.startPrank(sender1);
        IERC20(USDT).approve(address(socketGateway), amount);
        IERC20(USDT).approve(_symbiosisGateway, amount);

        console.log("approval");
        uint256 gasStockBeforeBridge = gasleft();

        socketGateway.executeRoute(385, impldata);

        uint256 gasStockAfterBridge = gasleft();

        console.log(
            "Symbiosis on Eth-Mainnet gas-cost for USDC-bridge: ",
            gasStockBeforeBridge - gasStockAfterBridge
        );

        assertEq(IERC20(USDT).balanceOf(address(socketGateway)), 0);
        assertEq(IERC20(USDT).balanceOf(sender1), 0);

        vm.stopPrank();
    }
}
