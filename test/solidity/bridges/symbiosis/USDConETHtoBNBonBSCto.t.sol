// SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.4;

import {Test} from "../../../../lib/forge-std/src/Test.sol";
import {Vm} from "../../../../lib/forge-std/src/Vm.sol";
import "../../../../lib/forge-std/src/console.sol";
import "../../../../lib/forge-std/src/Script.sol";
import "../../../../lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol";
import {SocketGatewayBaseTest, SocketGateway} from "../../SocketGatewayBaseTest.sol";
import {SymbiosisBridgeImpl} from "../../../../src/bridges/symbiosis/SymbiosisBridgeImp.sol";
import {ISocketRoute} from "../../../../src/interfaces/ISocketRoute.sol";

contract SymbiosisBridgeUSDCTest is Test, SocketGatewayBaseTest {
    SocketGateway internal socketGateway;

    event NewRouteAdded(uint32 indexed routeId, address indexed route);
    bytes32 metadata =
        0x28fd8a5dda29b4035905e0657f97244a0e0bef97951e248ed0f2c6878d6590c2;
    //ETH Mainnet
    address constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;
    address constant _symbiosisMetaRouter =
        0x1DCfbC3fA01b2a86bC3a3f43479cCe9E8D438Adc;
    address constant sender1 = 0xD07E50196a05e6f9E6656EFaE10fc9963BEd6E57;
    address constant _symbiosisGateway =
        0x0A0B7D1eea99e6189995432fec8172bB2dFFF847;
    address constant receiver = 0x17Ac6982b9CeAfbB36ee486722E8EB0f30b1E97D;

    SymbiosisBridgeImpl internal symbiosisImpl;

    function setUp() public {
        uint256 fork = vm.createFork(vm.envString("ETHEREUM_RPC"), 18375470);
        vm.selectFork(fork);
        socketGateway = createSocketGateway();
        symbiosisImpl = new SymbiosisBridgeImpl(
            _symbiosisMetaRouter,
            _symbiosisGateway,
            address(socketGateway),
            address(socketGateway)
        );
        address route_0 = address(symbiosisImpl);

        // Emits Event
        emit NewRouteAdded(0, route_0);
        vm.startPrank(owner);
        socketGateway.addRoute(route_0);
        vm.stopPrank();
    }

    struct SymbiosisDataVars {
        bytes firstSwapCalldata;
        bytes secondSwapCalldata;
        address[] approvedTokens;
        address firstDexRouter;
        address secondDexRouter;
        uint256 amount;
        bool nativeIn;
        address relayRecipient;
        bytes otherSideCalldata;
    }

    function testUSDConETHtoBNBonBSC() public {
        // uint256 amount = 100e6;
        uint256 value = 0;
        bytes
            memory firstSwapCalldata = hex"e449022e0000000000000000000000000000000000000000000000000000000005f5e10000000000000000000000000000000000000000000000000000df8f1b3cb1eed40000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000100000000000000000000000088e6a0c2ddd26feeb64f039a2c41296fcb3f5640ea698b47";
        bytes memory secondSwapCalldata = hex"";
        address[] memory approvedTokens = new address[](2);
        approvedTokens[0] = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;
        approvedTokens[1] = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;
        address firstDexRouter = 0x1111111254EEB25477B68fb85Ed929f73A960582;
        address secondDexRouter = 0xcB28fbE3E9C0FEA62E0E63ff3f232CECfE555aD4;
        uint256 amount = 0x05f5e100;
        address relayRecipient = 0xb8f275fBf7A959F4BCE59999A2EF122A099e81A8;
        bool nativeIn = false;
        bytes
            memory otherSideCalldata = hex"ce654c1700000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000b5e620f4800000000000000000000000000000000000000000000000000000e1d132c8f1ca74000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000f93d011544e89a28b5bdbdd833016cc5f26e82cd000000000000000000000000b8f275fbf7a959f4bce59999a2ef122a099e81a80000000000000000000000005523985926aa12ba58dc5ad00ddca99678d7227e000000000000000000000000f93d011544e89a28b5bdbdd833016cc5f26e82cd000000000000000000000000000000000000000000000000000000000000dbe00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000cb28fbe3e9c0fea62e0e63ff3f232cecfe555ad40000000000000000000000000000000000000000000000000000000000000260000000000000000000000000b8f275fbf7a959f4bce59999a2ef122a099e81a800000000000000000000000000000000000000000000000000000000000005800000000000000000000000000000000000000000000000000000000000000064000000000000000000000000f93d011544e89a28b5bdbdd833016cc5f26e82cd73796d62696f7369732d6170690000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000001ce4e75e2bd6bbbacde1e10d6813228138337e86000000000000000000000000424190072b7db5352bb91cc70dabd82f547ae00300000000000000000000000000000000000000000000000000000000000002e41e859a0500000000000000000000000000000000000000000000000000e1d132c8f1ca7400000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000b79a4f5828eb55c10d7abf4bfe9a9f5d11aa84e00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c48f6bdeaa0000000000000000000000000000000000000000000000000000000000000009000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000e11b4ca7fd4a7400000000000000000000000000000000000000000000000000de2e5329444d84000000000000000000000000b79a4f5828eb55c10d7abf4bfe9a9f5d11aa84e0000000000000000000000000000000000000000000000000000000006538aea9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000bcc2637dfa64999f75abb53a7265b5b4932e40eb00000000000000000000000000000000000000000000000000000000000000020000000000000000000000001ce4e75e2bd6bbbacde1e10d6813228138337e86000000000000000000000000424190072b7db5352bb91cc70dabd82f547ae003000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002e4e691a2aa00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000b5e620f4800000000000000000000000000000000000000000000000000000e18f5fd5258f29000000000000000000000000b79a4f5828eb55c10d7abf4bfe9a9f5d11aa84e00000000000000000000000001111111254eeb25477b68fb85ed929f73a960582000000000000000000000000424190072b7db5352bb91cc70dabd82f547ae00300000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000064000000000000000000000000f93d011544e89a28b5bdbdd833016cc5f26e82cd0000000000000000000000005aa5f7f84ed0e5db0a4a85c3947ea16b53352fd4000000000000000000000000b8f275fbf7a959f4bce59999a2ef122a099e81a8000000000000000000000000f93d011544e89a28b5bdbdd833016cc5f26e82cd000000000000000000000000000000000000000000000000000000000000003873796d62696f7369732d6170690000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e8f78dc253000000000000000000000000f93d011544e89a28b5bdbdd833016cc5f26e82cd0000000000000000000000002170ed0880ac9a755fd29b2688956bd959f933f800000000000000000000000000000000000000000000000000e0d979b4310f29000000000000000000000000000000000000000000000000066071d7ed0423fe00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000140000000000000003b7c458070d8929d04b60af4fb9b58713ebcf18765ade422ea698b4700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

        SymbiosisDataVars memory symbiosisDataVars;

        symbiosisDataVars.firstSwapCalldata = firstSwapCalldata;
        symbiosisDataVars.secondSwapCalldata = secondSwapCalldata;
        symbiosisDataVars.approvedTokens = approvedTokens;
        symbiosisDataVars.firstDexRouter = firstDexRouter;
        symbiosisDataVars.secondDexRouter = secondDexRouter;
        symbiosisDataVars.amount = amount;
        symbiosisDataVars.nativeIn = nativeIn;
        symbiosisDataVars.relayRecipient = relayRecipient;
        symbiosisDataVars.otherSideCalldata = otherSideCalldata;

        //sequence of arguments for implData: _amount, _receiverAddress, _token
        bytes memory impldata = abi.encodeWithSelector(
            symbiosisImpl.SYMBIOSIS_ERC20_EXTERNAL_BRIDGE_FUNCTION_SELECTOR(),
            metadata,
            receiver,
            USDC,
            56,
            SymbiosisBridgeImpl.SymbiosisMetaRouteData(
                symbiosisDataVars.firstSwapCalldata,
                symbiosisDataVars.secondSwapCalldata,
                symbiosisDataVars.approvedTokens,
                symbiosisDataVars.firstDexRouter,
                symbiosisDataVars.secondDexRouter,
                symbiosisDataVars.amount,
                symbiosisDataVars.nativeIn,
                symbiosisDataVars.relayRecipient,
                symbiosisDataVars.otherSideCalldata
            )
        );

        deal(address(USDC), address(sender1), amount);
        assertEq(IERC20(USDC).balanceOf(sender1), amount);
        assertEq(IERC20(USDC).balanceOf(address(socketGateway)), 0);
        assertEq(IERC20(USDC).balanceOf(receiver), 0);

        vm.startPrank(sender1);
        IERC20(USDC).approve(address(socketGateway), amount);

        console.log("approval");
        uint256 gasStockBeforeBridge = gasleft();

        socketGateway.executeRoute(385, impldata);

        uint256 gasStockAfterBridge = gasleft();

        console.log(
            "Symbiosis on Eth-Mainnet gas-cost for USDC-bridge: ",
            gasStockBeforeBridge - gasStockAfterBridge
        );

        assertEq(IERC20(USDC).balanceOf(address(socketGateway)), 0);
        assertEq(IERC20(USDC).balanceOf(sender1), 0);

        vm.stopPrank();
    }
}
